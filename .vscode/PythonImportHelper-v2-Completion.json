[
    {
        "label": "autoslug.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "autoslug.fields",
        "description": "autoslug.fields",
        "detail": "autoslug.fields",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "ckeditor.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "RichTextField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "PostForm",
        "importPath": "blog.forms",
        "description": "blog.forms",
        "isExtraImport": true,
        "detail": "blog.forms",
        "documentation": {}
    },
    {
        "label": "rest_framework",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rest_framework",
        "description": "rest_framework",
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework.authtoken",
        "description": "rest_framework.authtoken",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "blog.apiViews",
        "description": "blog.apiViews",
        "isExtraImport": true,
        "detail": "blog.apiViews",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "isExtraImport": true,
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "ModelBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "CKEditorWidget",
        "importPath": "ckeditor.widgets",
        "description": "ckeditor.widgets",
        "isExtraImport": true,
        "detail": "ckeditor.widgets",
        "documentation": {}
    },
    {
        "label": "AutoSlugField",
        "importPath": "autoslug",
        "description": "autoslug",
        "isExtraImport": true,
        "detail": "autoslug",
        "documentation": {}
    },
    {
        "label": "AutoSlugField",
        "importPath": "autoslug",
        "description": "autoslug",
        "isExtraImport": true,
        "detail": "autoslug",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "generate_audio",
        "importPath": "blog.utils",
        "description": "blog.utils",
        "isExtraImport": true,
        "detail": "blog.utils",
        "documentation": {}
    },
    {
        "label": "send_push_notification",
        "importPath": "blog.utils",
        "description": "blog.utils",
        "isExtraImport": true,
        "detail": "blog.utils",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "m2m_changed",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Choice",
        "importPath": "polls.models",
        "description": "polls.models",
        "isExtraImport": true,
        "detail": "polls.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "firebase_admin.messaging",
        "description": "firebase_admin.messaging",
        "isExtraImport": true,
        "detail": "firebase_admin.messaging",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "firebase_admin.messaging",
        "description": "firebase_admin.messaging",
        "isExtraImport": true,
        "detail": "firebase_admin.messaging",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "firebase_admin.messaging",
        "description": "firebase_admin.messaging",
        "isExtraImport": true,
        "detail": "firebase_admin.messaging",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "firebase_admin.messaging",
        "description": "firebase_admin.messaging",
        "isExtraImport": true,
        "detail": "firebase_admin.messaging",
        "documentation": {}
    },
    {
        "label": "FCMDevice",
        "importPath": "fcm_django.models",
        "description": "fcm_django.models",
        "isExtraImport": true,
        "detail": "fcm_django.models",
        "documentation": {}
    },
    {
        "label": "FCMDevice",
        "importPath": "fcm_django.models",
        "description": "fcm_django.models",
        "isExtraImport": true,
        "detail": "fcm_django.models",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "gTTS",
        "importPath": "gtts",
        "description": "gtts",
        "isExtraImport": true,
        "detail": "gtts",
        "documentation": {}
    },
    {
        "label": "html2text",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html2text",
        "description": "html2text",
        "detail": "html2text",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "generic",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "initialize_app",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0001_initial",
        "description": "blog.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CustomUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "blog.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0002_alter_comment_options_alter_customuser_city_and_more",
        "description": "blog.migrations.0002_alter_comment_options_alter_customuser_city_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='comment',\n            options={'ordering': ('-created',)},\n        ),\n        migrations.AlterField(",
        "detail": "blog.migrations.0002_alter_comment_options_alter_customuser_city_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0003_alter_customuser_img",
        "description": "blog.migrations.0003_alter_customuser_img",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0002_alter_comment_options_alter_customuser_city_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customuser',\n            name='img',\n            field=models.ImageField(blank=True, default='./media/profile_images/default_img.jpg', null=True, upload_to='profile_images/'),\n        ),",
        "detail": "blog.migrations.0003_alter_customuser_img",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0004_alter_customuser_img",
        "description": "blog.migrations.0004_alter_customuser_img",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0003_alter_customuser_img'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customuser',\n            name='img',\n            field=models.ImageField(blank=True, default='default_img.jpg', null=True, upload_to='profile_images/'),\n        ),",
        "detail": "blog.migrations.0004_alter_customuser_img",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0005_alter_customuser_gender",
        "description": "blog.migrations.0005_alter_customuser_gender",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0004_alter_customuser_img'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customuser',\n            name='gender',\n            field=models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=60),\n        ),",
        "detail": "blog.migrations.0005_alter_customuser_gender",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0006_alter_post_post_slug",
        "description": "blog.migrations.0006_alter_post_post_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0005_alter_customuser_gender'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='post_slug',\n            field=autoslug.fields.AutoSlugField(always_update=True, default=None, editable=False, null=True, populate_from='title', unique=True),\n        ),",
        "detail": "blog.migrations.0006_alter_post_post_slug",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0007_alter_comment_body",
        "description": "blog.migrations.0007_alter_comment_body",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0006_alter_post_post_slug'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='comment',\n            name='body',\n            field=models.TextField(blank=True),\n        ),",
        "detail": "blog.migrations.0007_alter_comment_body",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0008_alter_post_text",
        "description": "blog.migrations.0008_alter_post_text",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0007_alter_comment_body'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='text',\n            field=ckeditor.fields.RichTextField(),\n        ),",
        "detail": "blog.migrations.0008_alter_post_text",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0009_post_audio_file",
        "description": "blog.migrations.0009_post_audio_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0008_alter_post_text'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='audio_file',\n            field=models.FileField(blank=True, null=True, upload_to='audio/'),\n        ),",
        "detail": "blog.migrations.0009_post_audio_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0010_remove_post_audio_file",
        "description": "blog.migrations.0010_remove_post_audio_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0009_post_audio_file'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='post',\n            name='audio_file',\n        ),\n    ]",
        "detail": "blog.migrations.0010_remove_post_audio_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0011_alter_post_author",
        "description": "blog.migrations.0011_alter_post_author",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0010_remove_post_audio_file'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='author',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),\n        ),",
        "detail": "blog.migrations.0011_alter_post_author",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0012_post_audio_file",
        "description": "blog.migrations.0012_post_audio_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0011_alter_post_author'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='audio_file',\n            field=models.FileField(blank=True, null=True, upload_to='audio/'),\n        ),",
        "detail": "blog.migrations.0012_post_audio_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0013_remove_post_audio_file",
        "description": "blog.migrations.0013_remove_post_audio_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0012_post_audio_file'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='post',\n            name='audio_file',\n        ),\n    ]",
        "detail": "blog.migrations.0013_remove_post_audio_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0014_post_audio_file",
        "description": "blog.migrations.0014_post_audio_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0013_remove_post_audio_file'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='audio_file',\n            field=models.FileField(blank=True, null=True, upload_to='audio/'),\n        ),",
        "detail": "blog.migrations.0014_post_audio_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0015_alter_post_audio_file",
        "description": "blog.migrations.0015_alter_post_audio_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0014_post_audio_file'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='audio_file',\n            field=models.FileField(blank=True, null=True, upload_to=''),\n        ),",
        "detail": "blog.migrations.0015_alter_post_audio_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0016_hashtag_hashtagpost",
        "description": "blog.migrations.0016_hashtag_hashtagpost",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0015_alter_post_audio_file'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='HashTag',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=50, null=True, unique=True)),",
        "detail": "blog.migrations.0016_hashtag_hashtagpost",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0017_language",
        "description": "blog.migrations.0017_language",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0016_hashtag_hashtagpost'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Language',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "blog.migrations.0017_language",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0018_alter_language_name",
        "description": "blog.migrations.0018_alter_language_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0017_language'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='name',\n            field=models.CharField(choices=[('en', 'English'), ('es', 'Spanish'), ('fr', 'French'), ('de', 'German'), ('it', 'Italian'), ('pt', 'Portuguese'), ('ru', 'Russian'), ('ja', 'Japanese'), ('zh-CN', 'Chinese (Simplified)'), ('ar', 'Arabic'), ('hi', 'Hindi'), ('ko', 'Korean'), ('tr', 'Turkish'), ('nl', 'Dutch'), ('sv', 'Swedish'), ('fi', 'Finnish'), ('no', 'Norwegian'), ('da', 'Danish'), ('pl', 'Polish'), ('vi', 'Vietnamese'), ('th', 'Thai'), ('id', 'Indonesian'), ('ms', 'Malay'), ('he', 'Hebrew'), ('el', 'Greek'), ('cs', 'Czech'), ('hu', 'Hungarian'), ('ro', 'Romanian'), ('bg', 'Bulgarian'), ('uk', 'Ukrainian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('hr', 'Croatian'), ('sr', 'Serbian'), ('mk', 'Macedonian'), ('sq', 'Albanian'), ('et', 'Estonian'), ('lv', 'Latvian'), ('lt', 'Lithuanian'), ('hy', 'Armenian'), ('ka', 'Georgian'), ('uz', 'Uzbek'), ('kk', 'Kazakh'), ('ky', 'Kyrgyz'), ('tg', 'Tajik'), ('tk', 'Turkmen'), ('mn', 'Mongolian'), ('ps', 'Pashto'), ('fa', 'Persian'), ('ur', 'Urdu'), ('bn', 'Bengali'), ('pa', 'Punjabi'), ('gu', 'Gujarati'), ('or', 'Odia'), ('mr', 'Marathi'), ('ne', 'Nepali'), ('si', 'Sinhala'), ('ml', 'Malayalam'), ('kn', 'Kannada'), ('ta', 'Tamil'), ('te', 'Telugu'), ('ur', 'Urdu'), ('am', 'Amharic'), ('sw', 'Swahili'), ('yo', 'Yoruba'), ('ha', 'Hausa'), ('ig', 'Igbo'), ('zu', 'Zulu'), ('xh', 'Xhosa'), ('af', 'Afrikaans'), ('is', 'Icelandic'), ('ga', 'Irish'), ('mt', 'Maltese'), ('th', 'Thai'), ('km', 'Khmer'), ('lo', 'Lao'), ('my', 'Burmese'), ('si', 'Sinhala'), ('ka', 'Georgian'), ('mn', 'Mongolian'), ('dz', 'Dzongkha'), ('yi', 'Yiddish'), ('jw', 'Javanese'), ('su', 'Sundanese'), ('ms', 'Malay'), ('fil', 'Filipino'), ('ceb', 'Cebuano'), ('hmn', 'Hmong'), ('haw', 'Hawaiian'), ('sm', 'Samoan'), ('to', 'Tongan'), ('mi', 'Maori'), ('fj', 'Fijian')], max_length=100),\n        ),",
        "detail": "blog.migrations.0018_alter_language_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0019_alter_language_code",
        "description": "blog.migrations.0019_alter_language_code",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0018_alter_language_name'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='code',\n            field=models.CharField(blank=True, max_length=10, null=True, unique=True),\n        ),",
        "detail": "blog.migrations.0019_alter_language_code",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0020_alter_language_code",
        "description": "blog.migrations.0020_alter_language_code",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0019_alter_language_code'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='code',\n            field=models.CharField(blank=True, max_length=10, null=True),\n        ),",
        "detail": "blog.migrations.0020_alter_language_code",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0021_customuser_preferred_language",
        "description": "blog.migrations.0021_customuser_preferred_language",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0020_alter_language_code'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customuser',\n            name='preferred_language',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.language'),\n        ),",
        "detail": "blog.migrations.0021_customuser_preferred_language",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "blog.admin",
        "description": "blog.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    model = CustomUser\n    actions = ['export_as_csv']\n    def export_as_csv(self, request, queryset):\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = 'attachment; filename=\"users.csv\"'\n        writer = csv.writer(response)\n        writer.writerow([\n             'Username', \n             'Email', ",
        "detail": "blog.admin",
        "documentation": {}
    },
    {
        "label": "CustomPostAdmin",
        "kind": 6,
        "importPath": "blog.admin",
        "description": "blog.admin",
        "peekOfCode": "class CustomPostAdmin(admin.ModelAdmin):\n    form = PostForm\n    model = Post\n    list_display = ('title', 'post_cat', 'img_preview',)\n    list_filter = [\"tags\", \"published_date\", \"post_cat\"]\n    filter_horizontal = ('tags',)\n    search_fields = ('title', 'author__username')\n    def view_on_site(self, obj):\n        url = reverse(\"blog:post_detail\", kwargs={\"post_slug\": obj.post_slug})\n        return url",
        "detail": "blog.admin",
        "documentation": {}
    },
    {
        "label": "CustomCatAdmin",
        "kind": 6,
        "importPath": "blog.admin",
        "description": "blog.admin",
        "peekOfCode": "class CustomCatAdmin(admin.ModelAdmin):\n    model = Category\n    list_filter = ['title','description']\n    search_fields = ('title',)\n    def has_delete_permission(self, request, obj=None):\n        return False\nclass CustomCommentAdmin(admin.ModelAdmin):\n    model = Comment\n    list_display = ['name','post','text','body']\n    search_fields = ('text',)",
        "detail": "blog.admin",
        "documentation": {}
    },
    {
        "label": "CustomCommentAdmin",
        "kind": 6,
        "importPath": "blog.admin",
        "description": "blog.admin",
        "peekOfCode": "class CustomCommentAdmin(admin.ModelAdmin):\n    model = Comment\n    list_display = ['name','post','text','body']\n    search_fields = ('text',)\n    list_filter = [\"created\"]\nclass CustomtagAdmin(admin.ModelAdmin):\n    model = Tag\n    search_fields = ('name',)\n    list_filter = ['name','description']\n    def has_delete_permission(self, request, obj=None):",
        "detail": "blog.admin",
        "documentation": {}
    },
    {
        "label": "CustomtagAdmin",
        "kind": 6,
        "importPath": "blog.admin",
        "description": "blog.admin",
        "peekOfCode": "class CustomtagAdmin(admin.ModelAdmin):\n    model = Tag\n    search_fields = ('name',)\n    list_filter = ['name','description']\n    def has_delete_permission(self, request, obj=None):\n        return False\nclass CustomHashtagPostAdmin(admin.ModelAdmin):\n    model = HashTagPost\n    filter_horizontal = ('hashtagsm2m',)\nadmin.site.register(CustomUser, CustomUserAdmin)",
        "detail": "blog.admin",
        "documentation": {}
    },
    {
        "label": "CustomHashtagPostAdmin",
        "kind": 6,
        "importPath": "blog.admin",
        "description": "blog.admin",
        "peekOfCode": "class CustomHashtagPostAdmin(admin.ModelAdmin):\n    model = HashTagPost\n    filter_horizontal = ('hashtagsm2m',)\nadmin.site.register(CustomUser, CustomUserAdmin)\nadmin.site.register(Post,CustomPostAdmin)\nadmin.site.register(Category,CustomCatAdmin)\nadmin.site.register(Comment,CustomCommentAdmin)\nadmin.site.register(Tag,CustomtagAdmin)\nadmin.site.register(HashTagPost,CustomHashtagPostAdmin)\nadmin.site.register(HashTag)",
        "detail": "blog.admin",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "blog.apiUrls",
        "description": "blog.apiUrls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register('users', UserViewSet)\nrouter.register('posts', PostViewSet)\nrouter.register('category', CategoryViewSet)\nrouter.register('tags', TagViewSet)\nrouter.register('comment', CommentViewSet)\nrouter.register('login', LoginViewSet ,basename=\"logined\")\nrouter.register('signup', UserSignViewSet ,basename=\"signup\")\nurlpatterns = [\n    path('api-token-auth/', views.obtain_auth_token),",
        "detail": "blog.apiUrls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blog.apiUrls",
        "description": "blog.apiUrls",
        "peekOfCode": "urlpatterns = [\n    path('api-token-auth/', views.obtain_auth_token),\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n    path('', include(router.urls)),\n]",
        "detail": "blog.apiUrls",
        "documentation": {}
    },
    {
        "label": "LoginViewSet",
        "kind": 6,
        "importPath": "blog.apiViews",
        "description": "blog.apiViews",
        "peekOfCode": "class LoginViewSet(viewsets.ModelViewSet):\n    queryset = []  \n    http_method_names = ['post']\n    serializer_class = LoginSerializer\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = CustomUser.objects.all()\n    http_method_names = ['get']\n    serializer_class = UserSerializer\nclass UserSignViewSet(viewsets.ModelViewSet):\n    queryset = []",
        "detail": "blog.apiViews",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "blog.apiViews",
        "description": "blog.apiViews",
        "peekOfCode": "class UserViewSet(viewsets.ModelViewSet):\n    queryset = CustomUser.objects.all()\n    http_method_names = ['get']\n    serializer_class = UserSerializer\nclass UserSignViewSet(viewsets.ModelViewSet):\n    queryset = []\n    http_method_names = ['post']\n    serializer_class = UserSerializer\nclass PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.all()",
        "detail": "blog.apiViews",
        "documentation": {}
    },
    {
        "label": "UserSignViewSet",
        "kind": 6,
        "importPath": "blog.apiViews",
        "description": "blog.apiViews",
        "peekOfCode": "class UserSignViewSet(viewsets.ModelViewSet):\n    queryset = []\n    http_method_names = ['post']\n    serializer_class = UserSerializer\nclass PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n    filter_backends = [filters.SearchFilter,DjangoFilterBackend,filters.OrderingFilter]\n    search_fields = ['title', 'text','author__username']   \n    ordering_fields = ['created_date'] ",
        "detail": "blog.apiViews",
        "documentation": {}
    },
    {
        "label": "PostViewSet",
        "kind": 6,
        "importPath": "blog.apiViews",
        "description": "blog.apiViews",
        "peekOfCode": "class PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n    filter_backends = [filters.SearchFilter,DjangoFilterBackend,filters.OrderingFilter]\n    search_fields = ['title', 'text','author__username']   \n    ordering_fields = ['created_date'] \n    lookup_field = 'post_slug'  \n    pagination_class = PageNumberPagination\n    filterset_fields = [\"tags\",\"post_cat\",\"author\"]\n    http_method_names = ['post','get','patch']",
        "detail": "blog.apiViews",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "blog.apiViews",
        "description": "blog.apiViews",
        "peekOfCode": "class CategoryViewSet(viewsets.ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = [\"title\"]\n    http_method_names = ['post','get','patch']\nclass CommentViewSet(viewsets.ModelViewSet):\n    queryset = Comment.objects.all()\n    serializer_class = CommentSerializer\n    filter_backends = [filters.SearchFilter,DjangoFilterBackend]",
        "detail": "blog.apiViews",
        "documentation": {}
    },
    {
        "label": "CommentViewSet",
        "kind": 6,
        "importPath": "blog.apiViews",
        "description": "blog.apiViews",
        "peekOfCode": "class CommentViewSet(viewsets.ModelViewSet):\n    queryset = Comment.objects.all()\n    serializer_class = CommentSerializer\n    filter_backends = [filters.SearchFilter,DjangoFilterBackend]\n    search_fields = ['text', 'name','body']   \n    http_method_names = ['post','get','patch']\nclass TagViewSet(viewsets.ModelViewSet):   \n    queryset = Tag.objects.all()\n    serializer_class = TagSerializer\n    filter_backends = [DjangoFilterBackend,filters.SearchFilter]",
        "detail": "blog.apiViews",
        "documentation": {}
    },
    {
        "label": "TagViewSet",
        "kind": 6,
        "importPath": "blog.apiViews",
        "description": "blog.apiViews",
        "peekOfCode": "class TagViewSet(viewsets.ModelViewSet):   \n    queryset = Tag.objects.all()\n    serializer_class = TagSerializer\n    filter_backends = [DjangoFilterBackend,filters.SearchFilter]\n    search_fields = ['name']   \n    filterset_fields = [\"name\"]\n    http_method_names = ['post','get','patch']",
        "detail": "blog.apiViews",
        "documentation": {}
    },
    {
        "label": "BlogConfig",
        "kind": 6,
        "importPath": "blog.apps",
        "description": "blog.apps",
        "peekOfCode": "class BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog'\nclass TranslateConfig(AppConfig):\n    name = 'google_translate'",
        "detail": "blog.apps",
        "documentation": {}
    },
    {
        "label": "TranslateConfig",
        "kind": 6,
        "importPath": "blog.apps",
        "description": "blog.apps",
        "peekOfCode": "class TranslateConfig(AppConfig):\n    name = 'google_translate'",
        "detail": "blog.apps",
        "documentation": {}
    },
    {
        "label": "EmailOrUsernameModelBackend",
        "kind": 6,
        "importPath": "blog.authentication_backends",
        "description": "blog.authentication_backends",
        "peekOfCode": "class EmailOrUsernameModelBackend(ModelBackend):\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        UserModel = get_user_model()\n        user = UserModel.objects.filter(Q(email=username) | Q(username=username)).first()\n        if user and user.check_password(password):\n            return user\n        return None",
        "detail": "blog.authentication_backends",
        "documentation": {}
    },
    {
        "label": "BulkPostUploadForm",
        "kind": 6,
        "importPath": "blog.forms",
        "description": "blog.forms",
        "peekOfCode": "class BulkPostUploadForm(forms.Form):\n    excel_file = forms.FileField()\nclass ReadOnlyAudioPlayerWidget(forms.Widget):\n    def render(self, name, value, attrs=None, renderer=None):\n        if value:\n            return mark_safe('<audio controls src=\"{}\"></audio>'.format(value.url))\n        return \"No audio file\"\nclass PostForm(forms.ModelForm):\n    text = forms.CharField(widget=CKEditorWidget())\n    audio_file = forms.FileField(widget=ReadOnlyAudioPlayerWidget(), required=False)",
        "detail": "blog.forms",
        "documentation": {}
    },
    {
        "label": "ReadOnlyAudioPlayerWidget",
        "kind": 6,
        "importPath": "blog.forms",
        "description": "blog.forms",
        "peekOfCode": "class ReadOnlyAudioPlayerWidget(forms.Widget):\n    def render(self, name, value, attrs=None, renderer=None):\n        if value:\n            return mark_safe('<audio controls src=\"{}\"></audio>'.format(value.url))\n        return \"No audio file\"\nclass PostForm(forms.ModelForm):\n    text = forms.CharField(widget=CKEditorWidget())\n    audio_file = forms.FileField(widget=ReadOnlyAudioPlayerWidget(), required=False)\n    class Meta:\n        model = Post",
        "detail": "blog.forms",
        "documentation": {}
    },
    {
        "label": "PostForm",
        "kind": 6,
        "importPath": "blog.forms",
        "description": "blog.forms",
        "peekOfCode": "class PostForm(forms.ModelForm):\n    text = forms.CharField(widget=CKEditorWidget())\n    audio_file = forms.FileField(widget=ReadOnlyAudioPlayerWidget(), required=False)\n    class Meta:\n        model = Post\n        fields = ('title', 'text','post_cat','tags','image','feature_img')\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment   \n        fields = ('name', 'body')      ",
        "detail": "blog.forms",
        "documentation": {}
    },
    {
        "label": "CommentForm",
        "kind": 6,
        "importPath": "blog.forms",
        "description": "blog.forms",
        "peekOfCode": "class CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment   \n        fields = ('name', 'body')      \nclass CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = CustomUser\n        fields = ('username', 'email', 'password1', 'password2', )\nclass CustomUserChangeForm(UserChangeForm):\n    class Meta(UserCreationForm.Meta):",
        "detail": "blog.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "blog.forms",
        "description": "blog.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = CustomUser\n        fields = ('username', 'email', 'password1', 'password2', )\nclass CustomUserChangeForm(UserChangeForm):\n    class Meta(UserCreationForm.Meta):\n        model = CustomUser\n        fields =(\"email\", \"phone\", \"first_name\", \"last_name\", \"gender\", \"dob\", \"designation\", \"address\", \"pincode\", \"city\", \"state\", \"country\", \"img\",\"preferred_language\")\n        widgets = {\n            'dob': forms.DateInput(attrs={'type': 'date'}),",
        "detail": "blog.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserChangeForm",
        "kind": 6,
        "importPath": "blog.forms",
        "description": "blog.forms",
        "peekOfCode": "class CustomUserChangeForm(UserChangeForm):\n    class Meta(UserCreationForm.Meta):\n        model = CustomUser\n        fields =(\"email\", \"phone\", \"first_name\", \"last_name\", \"gender\", \"dob\", \"designation\", \"address\", \"pincode\", \"city\", \"state\", \"country\", \"img\",\"preferred_language\")\n        widgets = {\n            'dob': forms.DateInput(attrs={'type': 'date'}),\n        }",
        "detail": "blog.forms",
        "documentation": {}
    },
    {
        "label": "Language",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Language(models.Model):\n    name = models.CharField(max_length=100, choices=LANG_CHOICES)\n    code = models.CharField(max_length=10, null=True, blank=True)\n    def __str__(self):\n        return LANGUAGE_CODE_MAPPING.get(self.code,'')\n    def save(self, *args, **kwargs):\n        self.code = self.name  # Assign the name to the code field\n        super().save(*args, **kwargs)\n# Custom user modal using AbstractUser and added some new fields\nclass CustomUser(AbstractUser):",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    gender = models.CharField(max_length=60,choices=GENDER_CHOICES,blank=True)\n    city = models.CharField(max_length=80,blank=True)\n    state = models.CharField(max_length=90,blank=True)\n    country = models.CharField(max_length=50,blank=True,default='IN',choices=COUNTRY_CHOICES)\n    designation = models.CharField(max_length=50,null=True,blank=True)\n    img = models.ImageField(blank=True,null=True,upload_to='profile_images/',default='default_img.jpg')\n    phone = models.PositiveBigIntegerField(blank=True,default=0000000)\n    pincode = models.PositiveIntegerField(blank=True,null=True)\n    address = models.TextField(max_length=50,blank=True,null=True)",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Category(models.Model):\n    title = models.CharField(max_length=60)\n    description = models.TextField(max_length=120,default=\"Hii this is the discription\")\n    def __str__(self):\n        return self.title\nclass Tag(models.Model):\n    name = models.CharField(max_length=50, unique=True,null=True)\n    description = models.TextField(max_length=120,default=\"Hii this is the discription\")\n    def __str__(self):\n        return self.name",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Tag(models.Model):\n    name = models.CharField(max_length=50, unique=True,null=True)\n    description = models.TextField(max_length=120,default=\"Hii this is the discription\")\n    def __str__(self):\n        return self.name\nclass Post(models.Model):\n    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE,null=True)\n    post_cat = models.ForeignKey(Category,on_delete=models.CASCADE,null=True)\n    tags = models.ManyToManyField(Tag)\n    post_slug = AutoSlugField(populate_from='title', unique=True, null=True, default=None,always_update=True )  ",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Post(models.Model):\n    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE,null=True)\n    post_cat = models.ForeignKey(Category,on_delete=models.CASCADE,null=True)\n    tags = models.ManyToManyField(Tag)\n    post_slug = AutoSlugField(populate_from='title', unique=True, null=True, default=None,always_update=True )  \n    title = models.CharField(max_length=200)\n    text = RichTextField()\n    created_date = models.DateTimeField(default=timezone.now, editable=False)\n    published_date = models.DateTimeField(blank=True, null=True)\n    image = models.ImageField(null=True,blank=True)",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "HashTag",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class HashTag(models.Model):\n    title = models.CharField(max_length=50,unique=True,null=True)\n    def __str__(self):\n        return self.title\nclass HashTagPost(models.Model):\n    title = models.CharField(max_length=50, unique=True,null=True)\n    content = models.TextField(null=True)\n    hashtagsm2m = models.ManyToManyField(HashTag,blank=True)\n    created_date = models.DateTimeField(default=timezone.now, editable=False)\n    def __str__(self):",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "HashTagPost",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class HashTagPost(models.Model):\n    title = models.CharField(max_length=50, unique=True,null=True)\n    content = models.TextField(null=True)\n    hashtagsm2m = models.ManyToManyField(HashTag,blank=True)\n    created_date = models.DateTimeField(default=timezone.now, editable=False)\n    def __str__(self):\n        return self.title\n@receiver(m2m_changed, sender=HashTagPost.hashtagsm2m.through)\ndef handle_hashtags_m2m_change(sender, instance, action, reverse, model, pk_set, **kwargs):\n    if action == 'post_add' or action == 'post_remove' or action == 'post_clear':",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Comment(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE,null=True)\n    post = models.ForeignKey(Post,on_delete=models.CASCADE, related_name=\"comments\")\n    text = models.TextField(null=True)\n    name = models.CharField(max_length=50)\n    body = models.TextField(blank=True)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    active = models.BooleanField(default=True)\n    parent = models.ForeignKey(\"self\", null=True, blank=True, on_delete=models.CASCADE)",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "handle_hashtags_m2m_change",
        "kind": 2,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "def handle_hashtags_m2m_change(sender, instance, action, reverse, model, pk_set, **kwargs):\n    if action == 'post_add' or action == 'post_remove' or action == 'post_clear':\n        m2m_changed.disconnect(handle_hashtags_m2m_change, sender=HashTagPost.hashtagsm2m.through)\n        for hashtag_id in pk_set:\n            hashtag = HashTag.objects.get(pk=hashtag_id)\n            instance.hashtagsm2m.add(hashtag)\n        m2m_changed.connect(handle_hashtags_m2m_change, sender=HashTagPost.hashtagsm2m.through)\n@receiver(post_save, sender=HashTagPost)\ndef extract_and_save(sender, instance, **kwargs):\n    post_save.disconnect(extract_and_save, sender=HashTagPost)",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "extract_and_save",
        "kind": 2,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "def extract_and_save(sender, instance, **kwargs):\n    post_save.disconnect(extract_and_save, sender=HashTagPost)\n    hashtags = [word[1:] for word in instance.content.split() if word.startswith('#')]\n    # instance.hashtagsm2m.clear()\n    for hashtag_title in hashtags:\n        hashtag, created = HashTag.objects.get_or_create(title=hashtag_title)\n        instance.hashtagsm2m.add(hashtag)\n    instance.save()\n    post_save.connect(extract_and_save, sender=HashTagPost)\nclass Comment(models.Model):",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "COUNTRY_CHOICES",
        "kind": 5,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "COUNTRY_CHOICES = [\n    ('CN', 'China'),\n    ('IN', 'India'),\n    ('US', 'United States'),\n    ('ID', 'Indonesia'),\n    ('PK', 'Pakistan'),\n    ('BR', 'Brazil'),\n    ('NG', 'Nigeria'),\n    ('BD', 'Bangladesh'),\n    ('RU', 'Russia'),",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE_MAPPING",
        "kind": 5,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "LANGUAGE_CODE_MAPPING = {\n    'en': 'English',\n    'es': 'Spanish',\n    'fr': 'French',\n    'de': 'German',\n    'it': 'Italian',\n    'pt': 'Portuguese',\n    'ru': 'Russian',\n    'ja': 'Japanese',\n    'zh-CN': 'Chinese (Simplified)',",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "GENDER_CHOICES",
        "kind": 5,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "GENDER_CHOICES = (\n        ('M', 'Male'),\n        ('F', 'Female'),\n    )\nLANG_CHOICES = (\n    ('en', 'English'),\n    ('es', 'Spanish'),\n    ('fr', 'French'),\n    ('de', 'German'),\n    ('it', 'Italian'),",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "LANG_CHOICES",
        "kind": 5,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "LANG_CHOICES = (\n    ('en', 'English'),\n    ('es', 'Spanish'),\n    ('fr', 'French'),\n    ('de', 'German'),\n    ('it', 'Italian'),\n    ('pt', 'Portuguese'),\n    ('ru', 'Russian'),\n    ('ja', 'Japanese'),\n    ('zh-CN', 'Chinese (Simplified)'),",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "COUNTRY_CHOICES",
        "kind": 5,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "COUNTRY_CHOICES = sorted(COUNTRY_CHOICES, key=lambda x: x[1])\nclass Language(models.Model):\n    name = models.CharField(max_length=100, choices=LANG_CHOICES)\n    code = models.CharField(max_length=10, null=True, blank=True)\n    def __str__(self):\n        return LANGUAGE_CODE_MAPPING.get(self.code,'')\n    def save(self, *args, **kwargs):\n        self.code = self.name  # Assign the name to the code field\n        super().save(*args, **kwargs)\n# Custom user modal using AbstractUser and added some new fields",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class LoginSerializer(serializers.Serializer):\n    username = serializers.CharField()\n    password = serializers.CharField(write_only=True)\n    def validate(self, data):\n        username = data.get('username')\n        password = data.get('password')\n        try:\n            user = CustomUser.objects.get(Q(username=username) | Q(email=username))\n        except ObjectDoesNotExist:\n            raise serializers.ValidationError('Username or email does not exist.')",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class TagSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Tag\n        fields = \"__all__\"\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = \"__all__\"\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = \"__all__\"\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomUser\n        fields = ['id', 'username', 'city', 'state', 'country', 'email', 'phone', 'first_name', 'last_name', 'gender', 'dob','password']\n    def create(self, validated_data):\n        password = validated_data.pop('password')",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomUser\n        fields = ['id', 'username', 'city', 'state', 'country', 'email', 'phone', 'first_name', 'last_name', 'gender', 'dob','password']\n    def create(self, validated_data):\n        password = validated_data.pop('password')\n        user = super().create(validated_data)\n        user.set_password(password)\n        user.save()\n        token, _ = Token.objects.get_or_create(user=user)",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "PostSerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class PostSerializer(serializers.ModelSerializer):\n    tag = TagSerializer(many=True ,source='tags',read_only=True)\n    category = CategorySerializer(source='post_cat',read_only=True)\n    auther = UserSerializer(source='author', read_only=True, context={'request': None})\n    class Meta:\n        model = Post\n        fields = \"__all__\"\nclass CommentSerializer(serializers.ModelSerializer):\n    post = serializers.SerializerMethodField()\n    user = UserSerializer(read_only=True, context={'request': None})  ",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "CommentSerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class CommentSerializer(serializers.ModelSerializer):\n    post = serializers.SerializerMethodField()\n    user = UserSerializer(read_only=True, context={'request': None})  \n    parent = serializers.SerializerMethodField()\n    class Meta:\n        model = Comment\n        fields = \"__all__\"\n    def get_post(self, obj):\n        post = obj.post\n        if post:",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "blog.urls",
        "description": "blog.urls",
        "peekOfCode": "app_name = \"blog\"\nurlpatterns = [\n    path('post/<post_slug>/edit/', views.post_edit, name='post_edit'),\n    path('post/new-post/', views.post_new, name='post_new'),\n    path('post/<post_slug>/', views.post_detail, name='post_detail'),\n    path('user/<str:username>/', views.user_detail, name='user_detail'),\n    path('tag/<tag_slug>',views.tag_details,name='Tag_post'),\n    path('cat/<category_slug>',views.cat_details,name='Cat_post'),\n    path('post/cat', views.cat_list, name='Cat_list'),\n    path('post/tag', views.tag_list, name='Tag_list'),",
        "detail": "blog.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blog.urls",
        "description": "blog.urls",
        "peekOfCode": "urlpatterns = [\n    path('post/<post_slug>/edit/', views.post_edit, name='post_edit'),\n    path('post/new-post/', views.post_new, name='post_new'),\n    path('post/<post_slug>/', views.post_detail, name='post_detail'),\n    path('user/<str:username>/', views.user_detail, name='user_detail'),\n    path('tag/<tag_slug>',views.tag_details,name='Tag_post'),\n    path('cat/<category_slug>',views.cat_details,name='Cat_post'),\n    path('post/cat', views.cat_list, name='Cat_list'),\n    path('post/tag', views.tag_list, name='Tag_list'),\n    path('comment/reply/', views.reply_page, name=\"reply\"),",
        "detail": "blog.urls",
        "documentation": {}
    },
    {
        "label": "generate_audio",
        "kind": 2,
        "importPath": "blog.utils",
        "description": "blog.utils",
        "peekOfCode": "def generate_audio(blog_content, audio_file_path):\n    plain_text = html2text.html2text(blog_content)\n    tts = gTTS(text=plain_text, lang='en')\n    tts.save(audio_file_path)\ndef send_push_notification(title,body,data=None):\n    data = data or {}\n    message = Message(\n        notification=Notification(title=title, body=body, image=\"url\"),\n        data=data,\n    )",
        "detail": "blog.utils",
        "documentation": {}
    },
    {
        "label": "send_push_notification",
        "kind": 2,
        "importPath": "blog.utils",
        "description": "blog.utils",
        "peekOfCode": "def send_push_notification(title,body,data=None):\n    data = data or {}\n    message = Message(\n        notification=Notification(title=title, body=body, image=\"url\"),\n        data=data,\n    )\n    devices = FCMDevice.objects.all()\n    devices.send_message(message)",
        "detail": "blog.utils",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect('blog:post_list')  \ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            send_push_notification(title=\"login\", body=\"User login\",)",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            send_push_notification(title=\"login\", body=\"User login\",)\n            return redirect('blog:post_list')\n    else:\n        form = AuthenticationForm()",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "register_view",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def register_view(request):\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('blog:login')\n    else:\n        form = CustomUserCreationForm()\n    return render(request, 'blog/register.html', {'form': form}) ",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "post_list",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def post_list(request):\n    posts = Post.objects.order_by('-published_date')\n    categories = Category.objects.all()\n    return render(request, 'blog/post_list.html', {'posts': posts,'categorie':categories})\n# View for Category list\ndef cat_list(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/cat_list.html', {'categories':categories})\ndef tag_list(request):\n    tags = Tag.objects.all()",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "cat_list",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def cat_list(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/cat_list.html', {'categories':categories})\ndef tag_list(request):\n    tags = Tag.objects.all()\n    return render(request, 'blog/tag_list.html', {'tags':tags})\ndef post_detail(request, post_slug):\n    post = get_object_or_404(Post, post_slug=post_slug)\n    comments = post.comments.filter(active=True)\n    new_comment = None",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "tag_list",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def tag_list(request):\n    tags = Tag.objects.all()\n    return render(request, 'blog/tag_list.html', {'tags':tags})\ndef post_detail(request, post_slug):\n    post = get_object_or_404(Post, post_slug=post_slug)\n    comments = post.comments.filter(active=True)\n    new_comment = None\n    if request.method == 'POST':\n        comment_form = CommentForm(data=request.POST)\n        if comment_form.is_valid():",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "post_detail",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def post_detail(request, post_slug):\n    post = get_object_or_404(Post, post_slug=post_slug)\n    comments = post.comments.filter(active=True)\n    new_comment = None\n    if request.method == 'POST':\n        comment_form = CommentForm(data=request.POST)\n        if comment_form.is_valid():\n            new_comment = comment_form.save(commit=False)\n            new_comment.post = post\n            new_comment.save()",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "reply_page",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def reply_page(request):\n    if request.method == \"POST\":\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            post_id = request.POST.get('post_id') \n            parent_id = request.POST.get('parent')  \n            post_url = request.POST.get('post_url')  \n            reply = form.save(commit=False)\n            reply.post = Post(id=post_id)\n            reply.parent = Comment(id=parent_id)",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "cat_details",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def cat_details(request, category_slug):\n    categories = get_object_or_404(Category, title=category_slug)\n    posts = Post.objects.filter(post_cat=categories)\n    category_slug = \"Category for: \"+category_slug\n    return render(request, 'blog/post_list.html', {'posts': posts,'categorie':categories,\"query\":category_slug})\ndef tag_details(request, tag_slug):\n    tags = get_object_or_404(Tag, name=tag_slug)\n    posts = Post.objects.filter(tags=tags)\n    tag_slug = \"Tag for: \"+tag_slug\n    return render(request, 'blog/post_list.html', {'posts': posts,\"query\":tag_slug})",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "tag_details",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def tag_details(request, tag_slug):\n    tags = get_object_or_404(Tag, name=tag_slug)\n    posts = Post.objects.filter(tags=tags)\n    tag_slug = \"Tag for: \"+tag_slug\n    return render(request, 'blog/post_list.html', {'posts': posts,\"query\":tag_slug})\n@login_required(login_url='blog:login')\ndef post_new(request):\n    heading = \"New Post\"\n    if request.method == \"POST\":\n        form = PostForm(request.POST,request.FILES)",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "post_new",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def post_new(request):\n    heading = \"New Post\"\n    if request.method == \"POST\":\n        form = PostForm(request.POST,request.FILES)\n        if form.is_valid():\n            post = form.save(commit=False)\n            post.author = request.user\n            post.published_date = timezone.now()\n            post.save()\n            form.save_m2m()",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "bulk_post_upload",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def bulk_post_upload(request):\n    if request.method == 'POST':\n        form = BulkPostUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            excel_file = request.FILES['excel_file']\n            df = pd.read_excel(excel_file)\n            for _, row in df.iterrows():\n                Post.objects.create(\n                    title=row['title'],\n                    text=row['text'],",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "post_edit",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def post_edit(request, post_slug):\n    heading = \"Edit post\"\n    post = get_object_or_404(Post, post_slug=post_slug)\n    if request.method == \"POST\":\n        form = PostForm(request.POST,request.FILES, instance=post)\n        if form.is_valid():\n            post = form.save(commit=False)\n            post.author = request.user\n            post.published_date = timezone.now()\n            post.save()",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "edit_profile",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def edit_profile(request):\n    user = request.user\n    if request.method == 'POST':\n        form = CustomUserChangeForm(request.POST,request.FILES, instance=request.user)\n        if form.is_valid():\n            form.save()\n            return redirect('blog:user_detail'  ,username=user.username) \n    else:\n        form = CustomUserChangeForm(instance=request.user)\n    return render(request, 'blog/edit_profile.html', {'form': form})",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "user_detail",
        "kind": 2,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "def user_detail(request, username):\n    user = get_object_or_404(CustomUser, username=username)\n    return render(request, 'blog/userdetails.html', {'user': user})",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "firestore_adminCallTransformer",
        "kind": 6,
        "importPath": "myvenv.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "myvenv.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "class firestore_adminCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'create_database': ('parent', 'database', 'database_id', ),\n        'create_index': ('parent', 'index', ),\n        'delete_index': ('name', ),\n        'export_documents': ('name', 'collection_ids', 'output_uri_prefix', 'namespace_ids', 'snapshot_time', ),\n        'get_database': ('name', ),\n        'get_field': ('name', ),\n        'get_index': ('name', ),",
        "detail": "myvenv.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "myvenv.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "myvenv.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "myvenv.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "myvenv.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "myvenv.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestore_adminCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "myvenv.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "firestoreCallTransformer",
        "kind": 6,
        "importPath": "myvenv.Scripts.fixup_firestore_v1_keywords",
        "description": "myvenv.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "class firestoreCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'batch_get_documents': ('database', 'documents', 'mask', 'transaction', 'new_transaction', 'read_time', ),\n        'batch_write': ('database', 'writes', 'labels', ),\n        'begin_transaction': ('database', 'options', ),\n        'commit': ('database', 'writes', 'transaction', ),\n        'create_document': ('parent', 'collection_id', 'document', 'document_id', 'mask', ),\n        'delete_document': ('name', 'current_document', ),\n        'get_document': ('name', 'mask', 'transaction', 'read_time', ),",
        "detail": "myvenv.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "myvenv.Scripts.fixup_firestore_v1_keywords",
        "description": "myvenv.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "myvenv.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "myvenv.Scripts.fixup_firestore_v1_keywords",
        "description": "myvenv.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestoreCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "myvenv.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "cmd_doc",
        "kind": 5,
        "importPath": "myvenv.Scripts.runxlrd",
        "description": "myvenv.Scripts.runxlrd",
        "peekOfCode": "cmd_doc = \"\"\"\nCommands:\n2rows           Print the contents of first and last row in each sheet\n3rows           Print the contents of first, second and last row in each sheet\nbench           Same as \"show\", but doesn't print -- for profiling\nbiff_count[1]   Print a count of each type of BIFF record in the file\nbiff_dump[1]    Print a dump (char and hex) of the BIFF records in the file\nfonts           hdr + print a dump of all font objects\nhdr             Mini-overview of file (no per-sheet information)\nhotshot         Do a hotshot profile run e.g. ... -f1 hotshot bench bigfile*.xls",
        "detail": "myvenv.Scripts.runxlrd",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "myvenv.Scripts.runxlrd",
        "description": "myvenv.Scripts.runxlrd",
        "peekOfCode": "options = None\nif __name__ == \"__main__\":\n    import xlrd\n    import sys\n    import time\n    import glob\n    import traceback\n    import gc\n    from xlrd.timemachine import xrange, REPR\n    class LogHandler(object):",
        "detail": "myvenv.Scripts.runxlrd",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "polls.migrations.0001_initial",
        "description": "polls.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Question',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('question_text', models.CharField(max_length=200)),",
        "detail": "polls.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "polls.migrations.0002_question_que_slug",
        "description": "polls.migrations.0002_question_que_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('polls', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='question',\n            name='que_slug',\n            field=autoslug.fields.AutoSlugField(default=None, editable=True, null=True, populate_from='question_text', unique=True),\n        ),",
        "detail": "polls.migrations.0002_question_que_slug",
        "documentation": {}
    },
    {
        "label": "Customechoice",
        "kind": 6,
        "importPath": "polls.admin",
        "description": "polls.admin",
        "peekOfCode": "class Customechoice(admin.ModelAdmin):\n    model = Choice\n    list_filter = ['choice_text']\nclass ChoiceInline(admin.TabularInline):\n    model = Choice\n    extra = 3\nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (None, {\"fields\": [\"question_text\"]}),\n        (\"Date information\", {\"fields\": [\"pub_date\"], \"classes\": [\"collapse\"]}),",
        "detail": "polls.admin",
        "documentation": {}
    },
    {
        "label": "ChoiceInline",
        "kind": 6,
        "importPath": "polls.admin",
        "description": "polls.admin",
        "peekOfCode": "class ChoiceInline(admin.TabularInline):\n    model = Choice\n    extra = 3\nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (None, {\"fields\": [\"question_text\"]}),\n        (\"Date information\", {\"fields\": [\"pub_date\"], \"classes\": [\"collapse\"]}),\n    ]\n    inlines = [ChoiceInline]\n    list_display = [\"question_text\", \"pub_date\", \"was_published_recently\",\"que_slug\"]",
        "detail": "polls.admin",
        "documentation": {}
    },
    {
        "label": "QuestionAdmin",
        "kind": 6,
        "importPath": "polls.admin",
        "description": "polls.admin",
        "peekOfCode": "class QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (None, {\"fields\": [\"question_text\"]}),\n        (\"Date information\", {\"fields\": [\"pub_date\"], \"classes\": [\"collapse\"]}),\n    ]\n    inlines = [ChoiceInline]\n    list_display = [\"question_text\", \"pub_date\", \"was_published_recently\",\"que_slug\"]\n    list_filter = [\"pub_date\"]\n    search_fields = [\"question_text\"]\nadmin.site.register(Question, QuestionAdmin)",
        "detail": "polls.admin",
        "documentation": {}
    },
    {
        "label": "PollsConfig",
        "kind": 6,
        "importPath": "polls.apps",
        "description": "polls.apps",
        "peekOfCode": "class PollsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'polls'",
        "detail": "polls.apps",
        "documentation": {}
    },
    {
        "label": "CustomErrorMiddleware",
        "kind": 6,
        "importPath": "polls.middleware",
        "description": "polls.middleware",
        "peekOfCode": "class CustomErrorMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        response = self.get_response(request)\n        if response.status_code == 404:\n            return render(request, 'polls/404.html', {'path': request.path})\n        if response.status_code == 500:\n            return render(request, 'polls/500.html')\n        return response",
        "detail": "polls.middleware",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "polls.models",
        "description": "polls.models",
        "peekOfCode": "class Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n    que_slug = AutoSlugField(populate_from='question_text', unique=True, null=True, default=None, editable=True) \n    def __str__(self):\n        return self.question_text\n    def was_published_recently(self):\n        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)",
        "detail": "polls.models",
        "documentation": {}
    },
    {
        "label": "Choice",
        "kind": 6,
        "importPath": "polls.models",
        "description": "polls.models",
        "peekOfCode": "class Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n    def __str__(self):\n        return self.choice_text",
        "detail": "polls.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "polls.urls",
        "description": "polls.urls",
        "peekOfCode": "app_name = \"polls\"\nurlpatterns = [\n    path(\"<que_slug>/results/\", views.ResultsView.as_view(), name=\"results\"),\n    path(\"<que_slug>/vote/\", views.vote, name=\"vote\"),\n    path(\"<que_slug>/\", views.DetailView.as_view(), name=\"detail\"),\n    path(\"\", views.IndexView.as_view(login_url='/login'), name=\"index\"),\n]",
        "detail": "polls.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "polls.urls",
        "description": "polls.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"<que_slug>/results/\", views.ResultsView.as_view(), name=\"results\"),\n    path(\"<que_slug>/vote/\", views.vote, name=\"vote\"),\n    path(\"<que_slug>/\", views.DetailView.as_view(), name=\"detail\"),\n    path(\"\", views.IndexView.as_view(login_url='/login'), name=\"index\"),\n]",
        "detail": "polls.urls",
        "documentation": {}
    },
    {
        "label": "IndexView",
        "kind": 6,
        "importPath": "polls.views",
        "description": "polls.views",
        "peekOfCode": "class IndexView(generic.ListView,LoginRequiredMixin):\n    template_name = \"polls/index.html\"\n    context_object_name = \"latest_question_list\"\n    slug_field = 'que_slug'\n    slug_url_kwarg = 'que_slug'\n    success_url = '/polls'\n    def get_queryset(self):\n        return Question.objects.order_by(\"-pub_date\")\nclass DetailView(generic.DetailView,LoginRequiredMixin):\n    model = Question",
        "detail": "polls.views",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "kind": 6,
        "importPath": "polls.views",
        "description": "polls.views",
        "peekOfCode": "class DetailView(generic.DetailView,LoginRequiredMixin):\n    model = Question\n    slug_field = 'que_slug'\n    slug_url_kwarg = 'que_slug'\n    template_name = \"polls/detail.html\"\n    def get_login_url(self):\n        return super().get_login_url() + f'?next={self.request.path}'\nclass ResultsView(generic.DetailView,LoginRequiredMixin):\n    model = Question\n    template_name = \"polls/results.html\"",
        "detail": "polls.views",
        "documentation": {}
    },
    {
        "label": "ResultsView",
        "kind": 6,
        "importPath": "polls.views",
        "description": "polls.views",
        "peekOfCode": "class ResultsView(generic.DetailView,LoginRequiredMixin):\n    model = Question\n    template_name = \"polls/results.html\"\n    slug_field = 'que_slug'\n    slug_url_kwarg = 'que_slug'\ndef vote(request, que_slug):\n    question = get_object_or_404(Question, que_slug=que_slug)\n    slug_field = 'que_slug'\n    slug_url_kwarg = 'que_slug'\n    try:",
        "detail": "polls.views",
        "documentation": {}
    },
    {
        "label": "vote",
        "kind": 2,
        "importPath": "polls.views",
        "description": "polls.views",
        "peekOfCode": "def vote(request, que_slug):\n    question = get_object_or_404(Question, que_slug=que_slug)\n    slug_field = 'que_slug'\n    slug_url_kwarg = 'que_slug'\n    try:\n        selected_choice = question.choice_set.get(pk=request.POST[\"choice\"])\n    except (KeyError, Choice.DoesNotExist):\n        # Redisplay the question voting form.\n        return render(\n            request,",
        "detail": "polls.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project01.asgi",
        "description": "project01.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project01.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-p&mlwbmxykb$li)4vv%%fq2fxctvww3!%3at0=qrsn(6+1_td&'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-p&mlwbmxykb$li)4vv%%fq2fxctvww3!%3at0=qrsn(6+1_td&'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.sites',",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.sites',\n    'django.contrib.staticfiles',",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.sites',\n    'django.contrib.staticfiles',\n    'allauth',\n    'allauth.account',",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "SITE_ID = 1\nSOCIALACCOUNT_LOGIN_ON_GET=True\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n    # 'polls.middleware.CustomErrorMiddleware'",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "ROOT_URLCONF = 'project01.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "WSGI_APPLICATION = 'project01.wsgi.application'\nTEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.core.context_processors.auth\",\n    \"django.core.context_processors.debug\",\n    \"django.core.context_processors.i18n\",\n    \"django.core.context_processors.media\",\n    \"django.core.context_processors.request\",\n)\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_CONTEXT_PROCESSORS",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "TEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.core.context_processors.auth\",\n    \"django.core.context_processors.debug\",\n    \"django.core.context_processors.i18n\",\n    \"django.core.context_processors.media\",\n    \"django.core.context_processors.request\",\n)\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nREST_FRAMEWORK = {\n     'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n     'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,\n}\n# Password validation",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'blog.authentication_backends.EmailOrUsernameModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'APP': {\n            'client_id': '196069865532-u13ekuhp0e3k6cr596cl1kd96kg0g433.apps.googleusercontent.com',\n            'secret': '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',\n            'key': ''",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_PROVIDERS",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "SOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'APP': {\n            'client_id': '196069865532-u13ekuhp0e3k6cr596cl1kd96kg0g433.apps.googleusercontent.com',\n            'secret': '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',\n            'key': ''\n        },\n        'SCOPE': [\n            'profile',\n            'email',",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY = '77wvscmxfqbk1m'  # App ID\nSOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET ='a3dRUGRhWJe3JfI5'\nfirebase_config = {\n    \"apiKey\": \"AIzaSyDbKj0Tom9CzZ66N3O9UfkPyXr0r505-VE\",\n    \"authDomain\": \"django-fcm-8e2f0.firebaseapp.com\",\n    \"projectId\": \"django-fcm-8e2f0\",\n    \"storageBucket\": \"django-fcm-8e2f0.appspot.com\",\n    \"messagingSenderId\": \"196069865532\",\n    \"appId\": \"1:196069865532:web:88f22c137bd5977519eb39\",\n    \"measurementId\": \"G-Z1EJE6FK4Z\",",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "firebase_config",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "firebase_config = {\n    \"apiKey\": \"AIzaSyDbKj0Tom9CzZ66N3O9UfkPyXr0r505-VE\",\n    \"authDomain\": \"django-fcm-8e2f0.firebaseapp.com\",\n    \"projectId\": \"django-fcm-8e2f0\",\n    \"storageBucket\": \"django-fcm-8e2f0.appspot.com\",\n    \"messagingSenderId\": \"196069865532\",\n    \"appId\": \"1:196069865532:web:88f22c137bd5977519eb39\",\n    \"measurementId\": \"G-Z1EJE6FK4Z\",\n}\nfirebase_credentials_path = r'C:\\Users\\chira\\Desktop\\django-merged\\firebase-service-account-key.json'",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "firebase_credentials_path",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "firebase_credentials_path = r'C:\\Users\\chira\\Desktop\\django-merged\\firebase-service-account-key.json'\nos.environ['GOOGLE_APPLICATION_CREDENTIALS'] = firebase_credentials_path\nFIREBASE_APP = initialize_app(options={\n    'projectId': firebase_config['projectId'],\n    'credential_path': firebase_credentials_path,\n    # Add other configuration options if necessary\n})\nFCM_DJANGO_SETTINGS = {\n    \"DEFAULT_FIREBASE_APP\": FIREBASE_APP,\n    \"ONE_DEVICE_PER_USER\": False,  # Set to True if you want only one active device per user at a time",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "os.environ['GOOGLE_APPLICATION_CREDENTIALS']",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = firebase_credentials_path\nFIREBASE_APP = initialize_app(options={\n    'projectId': firebase_config['projectId'],\n    'credential_path': firebase_credentials_path,\n    # Add other configuration options if necessary\n})\nFCM_DJANGO_SETTINGS = {\n    \"DEFAULT_FIREBASE_APP\": FIREBASE_APP,\n    \"ONE_DEVICE_PER_USER\": False,  # Set to True if you want only one active device per user at a time\n    \"DELETE_INACTIVE_DEVICES\": False,  # Set to True if you want to delete inactive devices",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_APP",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "FIREBASE_APP = initialize_app(options={\n    'projectId': firebase_config['projectId'],\n    'credential_path': firebase_credentials_path,\n    # Add other configuration options if necessary\n})\nFCM_DJANGO_SETTINGS = {\n    \"DEFAULT_FIREBASE_APP\": FIREBASE_APP,\n    \"ONE_DEVICE_PER_USER\": False,  # Set to True if you want only one active device per user at a time\n    \"DELETE_INACTIVE_DEVICES\": False,  # Set to True if you want to delete inactive devices\n}",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "FCM_DJANGO_SETTINGS",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "FCM_DJANGO_SETTINGS = {\n    \"DEFAULT_FIREBASE_APP\": FIREBASE_APP,\n    \"ONE_DEVICE_PER_USER\": False,  # Set to True if you want only one active device per user at a time\n    \"DELETE_INACTIVE_DEVICES\": False,  # Set to True if you want to delete inactive devices\n}\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = 'post_list' ",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = 'post_list' \n# LOGIN_URL = '/login/'",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = 'post_list' \n# LOGIN_URL = '/login/'\nAUTH_USER_MODEL = 'blog.CustomUser'",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = 'post_list' \n# LOGIN_URL = '/login/'\nAUTH_USER_MODEL = 'blog.CustomUser'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = 'post_list' \n# LOGIN_URL = '/login/'\nAUTH_USER_MODEL = 'blog.CustomUser'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = 'post_list' \n# LOGIN_URL = '/login/'\nAUTH_USER_MODEL = 'blog.CustomUser'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'blog.CustomUser'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "project01.settings",
        "description": "project01.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "project01.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project01.urls",
        "description": "project01.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"polls/\", include(\"polls.urls\")),\n    path('api',include('blog.apiUrls')),\n    path('accounts/', include('allauth.urls')),\n    path('accounts/', include('allauth.socialaccount.urls')),\n    path('', include('blog.urls')),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "project01.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project01.wsgi",
        "description": "project01.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project01.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project01.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]